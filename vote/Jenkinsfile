pipeline {

  agent none

  stages {
    stage('vote-build') {
      agent {
        docker {
          image 'python:2.7.16-slim'
          args '--user root'
        }
      }
      when {
        changeset '**/vote/**'
      }
      steps {
        echo 'Compiling vote app.'
        dir('vote') {
          sh "pip install -r requirements.txt"
        }
      }
    }

    stage('vote-test') {
      agent {
        docker {
          image 'python:2.7.16-slim'
          args '--user root'
        }
      }
      when {
        changeset '**/vote/**'
      }
      steps {
        echo 'Running Unit Tests on vote app.'
        dir('vote') {
          sh "pip install -r requirements.txt"
          sh 'nosetests -v'
        }
      }
    }

    stage('vote-integration') {
      agent any
      when {
        changeset "**/vote/**"
        branch 'master'
      }
      steps {
        echo 'Running Integration Tests on vote app'
        dir('vote') {
          sh 'sh integration_test.sh'
        }
      }
    }

    stage('vote-docker-package') {
      agent any
      steps {
        echo 'Packaging voteworker noarch app with docker'
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
            // ./vote is the path to the Dockerfile that Jenkins will find from the Github repo
            //def voteImage = docker.build("eddiedlopez/vote-noarch:v${env.BUILD_ID}", "./vote")
            sh "docker buildx create --use --name noarch"
	    sh """
	    docker buildx build --platform linux/amd64,linux/arm64 -t eddiedlopez/vote-noarch:latest --push .
	    """ 
	    //voteImage.push()
            //voteImage.push("${env.BRANCH_NAME}")
            //voteImage.push("latest")
          }
        }
      }
    }

    stage('Trigger deployment') {
      agent any
      environment {
        def GIT_COMMIT = "${env.GIT_COMMIT}"
      }
    steps {
      echo "${GIT_COMMIT}"
      echo "triggering deployment"
      // passing variables to job deployment run by vote-deploy repository Jenkinsfile
      build job: 'deployment', parameters: [string(name: 'DOCKERTAG', value: GIT_COMMIT)]
    }
  }  
}

  post {
    always {
      echo 'Pipeline for vote is complete'
    }
  }
}
